# -*- coding: utf-8 -*-
"""Alimentacao-dos-deputados.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TSdkybVZ152hfR5JvqKkASsk8RfHqUYY

**Trabalho de Conclusão do Módulo I do Master em Jornalismo de Dados, Automação e Datastorytelling do Insper**

Graziela França da Silva

**Objetivo:** A ideia é criar um robô que analise os gastos com alimentação dos deputados federais do Nordeste, ressarcidos pela Cota para Exercício da Atividade Parlamentar. Após a raspagem da API da Câmara dos Deputados, o código armazena os gastos com alimentação a partir de R$100 em um .csv e envia pra um e-mail determinado.

**PARTE 1: Raspando a API da Câmara dos Deputados**

Para isso, instalei algumas bibliotecas, raspei os dados desejados da API e utilizei o Pandas para fazer um DataFrame e salvar em um .csv
"""

#importando as bibliotecas


import requests
import pandas as pd
import json

#Acessando a API da Câmara dos Deputados e já selecionando e ordenando por estado do Nordeste
url = 'https://dadosabertos.camara.leg.br/api/v2/deputados'
params = {
    'formato': 'json',
    'itens': 100,
    'siglaUf':'AL,BA,CE,MA,PB,PE,PI,RN,SE',
    'idLegislatura':'57',
    'ordenarPor':'siglaUf'
}

response = requests.get(url, params=params)

if response.status_code == 200:
    deputados = response.json()['dados']
else:
    print('Erro ao obter dados dos deputados')
    deputados = []

#verificando
deputados

ALIMENTACAO = 'FORNECIMENTO DE ALIMENTAÇÃO DO PARLAMENTAR'
despesas_total = []

for deputado in deputados:
    url_despesas = f'https://dadosabertos.camara.leg.br/api/v2/deputados/{deputado["id"]}/despesas'
    params_despesas = {
        'formato': 'json',
        'itens': 100,
         'ordenarPor':'ano',
         'ordem':'DESC'
    }

    response_despesas= requests.get(url_despesas, params=params_despesas)

    if response_despesas.status_code == 200:
        despesas = response_despesas.json()['dados']
    else:
        despesas = []

    for despesa in despesas:
        despesa['siglaUf'] = deputado['siglaUf']
        despesa['nomeParlamentar'] = deputado['nome']

    despesas_total.extend(despesas)

despesas_alimentacao = [despesa for despesa in despesas_total if despesa['tipoDespesa'] == ALIMENTACAO]
despesas_acima_100 = [despesa for despesa in despesas_alimentacao if despesa['valorLiquido'] >= 100]

df_despesas = pd.DataFrame(despesas_acima_100)

# Selecionando apenas as colunas que você deseja manter no arquivo CSV
df_despesas = df_despesas[['nomeParlamentar', 'siglaUf', 'tipoDespesa', 'nomeFornecedor','cnpjCpfFornecedor','valorLiquido', 'mes', 'ano']]

# Salvando o DataFrame como um arquivo CSV
df_despesas.to_csv('despesas_alimentacao.csv', index=False)

valor_liquido= df_despesas['valorLiquido']
valor_liquido

nome_estabelecimento=df_despesas['nomeFornecedor']
nome_estabelecimento

"""**PARTE 2: Fazer o código que resultará no texto do e-mail**

Para isso vou precisar criar um parágrafo que ele envie uma vez por semana por e-mail com os deputados que tenham apresentado despesas acima dos R$100

"""

!pip install datetime
from datetime import date
from datetime import datetime

#datas e dias da semana
from datetime import date, datetime

hj = date.today()
dias = ('terça-feira', 'quarta-feira', 'quinta-feira', 'sexta-feira', 'sábado', 'domingo', 'segunda-feira')
dia_semana = dias[hj.weekday()]
data_atual = datetime.now()
mes_atual = data_atual.strftime('%m')
dia_atual = data_atual.strftime('%d')

#estado
estado = ['BA', 'SE', 'AL', 'PE', 'RN', 'PB', 'CE', 'PI', 'MA']

#informações do fornecedor e gastos

nomeFornecedor='' #como trazer as informações do fornecedor para essa variável?

valorLiquido='' #como trazer as informações do valor para essa variável?

if dia_semana == "sábado" or dia_semana == "domingo":
    pronome = 'No'
else:
    pronome = 'Na'

if mes_atual == '01':
    mes_atual = 'Janeiro'
if mes_atual == '02':
    mes_atual = 'Fevereiro'
if mes_atual == '03':
    mes_atual = 'Março'
if mes_atual == '04':
    mes_atual = 'Abril'
if mes_atual == '05':
    mes_atual = 'Maio'
if mes_atual == '06':
    mes_atual = 'Junho'
if mes_atual == '07':
    mes_atual = 'Julho'
if mes_atual == '08':
    mes_atual = 'Agosto'
if mes_atual == '09':
    mes_atual = 'Setembro'
if mes_atual == '10':
    mes_atual = 'Outubro'
if mes_atual == '11':
    mes_atual = 'Novembro'
if mes_atual == '12':
    mes_atual = 'Dezembro'

linhas = []
# loop através de cada linha do dataframe "despesas"
for index, row in df_despesas.iterrows():
    parlamentar = row["nomeParlamentar"]
    nome_estabelecimento= row['nomeFornecedor']
    valor_liquido = row['valorLiquido']
    mes=row['mes']
    ano=row['ano']

    # aqui vem o resto do seu código para gerar o texto do e-mail para cada despesa

    texto = (f"No mês de {mes} de {ano}, {parlamentar} gastou R$ {valor_liquido} no estabelecimento {nome_estabelecimento}.")
    print(texto) #alterei para imprimir cada texto no console, para visualização
    linhas.append(texto)

"""**PARTE 3: Fazendo o código para envio do e-mail**


Para isso vou precisar utilizar o sendgrid


"""

import getpass
import requests
token=getpass.getpass()

!pip install sendgrid
import sendgrid
import os
from sendgrid.helpers.mail import Mail, Email, To, Content

sg = sendgrid.SendGridAPIClient(token)
from_email = Email("ola@agenciatatu.com.br")  # Change to your verified sender
to_email = To("graziela.fcs@gmail.com")  # Change to your recipient
subject = "Confira as despesas com alimentação dos deputados federais do NE"
if dia_semana == "sábado" or dia_semana == "domingo":
    pronome = 'No'
else:
    pronome = 'Na'

conteudo_email = f"No mês de {mes} de {ano}, {parlamentar} gastou R$ {valor_liquido} no estabelecimento {nome_estabelecimento}."
content = Content("text/plain", conteudo_email)
mail = Mail(from_email, to_email, subject, content)

#código que está dando erro

# Get a JSON-ready representation of the Mail object
mail_json = mail.get()
# Send an HTTP POST request to /mail/send
response = sg.client.mail.send.post(request_body=mail_json)
print(response.status_code)
print(response.headers)

"""**PARTE 4: Conectar os códigos anteriores e enviar o e-mail e finalizar o programa**"""